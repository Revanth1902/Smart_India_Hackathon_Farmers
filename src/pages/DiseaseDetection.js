import React, { useState } from "react";
import {
  Container,
  Typography,
  Button,
  Box,
  Card,
  CardMedia,
  Alert,
  Fade,
  Slide,
  Grow,
  Grid,
} from "@mui/material";
import { styled } from "@mui/system";
import { CircularProgress } from "@mui/material";

import useLanguage from "../hooks/useLanguage"; // Your hook to get language

// Disease info with precautions
// Updated diseaseDatabase with fertilizers added
const diseaseDatabase = {
  "Banana Freckle": {
    scientificName: "Phyllostica cavendishii",
    precautions: [
      "Remove infected banana leaves.",
      "Use disease-free planting material.",
      "Apply recommended fungicides.",
    ],
    fertilizers: [
      "Balanced NPK fertilizer (10-10-10)",
      "Potassium-rich fertilizer",
      "Organic compost",
    ],
  },
  "Sheath Blight of Rice": {
    precautions: [
      "Maintain proper water management.",
      "Avoid dense planting to improve air circulation.",
      "Use fungicides as advised by experts.",
    ],
    fertilizers: [
      "Nitrogen fertilizer (Urea)",
      "Phosphorus fertilizer (Single Super Phosphate)",
      "Potassium fertilizer (Muriate of Potash)",
    ],
  },
  "Coconut Disease": {
    precautions: [
      "Remove and destroy affected fronds.",
      "Apply copper-based fungicides regularly.",
      "Ensure good soil drainage.",
    ],
    fertilizers: [
      "Coconut-specific NPK fertilizers",
      "Magnesium sulfate",
      "Organic mulch and compost",
    ],
  },
  "Rubber Disease": {
    precautions: [
      "Prune infected branches.",
      "Apply fungicides on affected trees.",
      "Maintain tree vigor through balanced fertilization.",
    ],
    fertilizers: [
      "Balanced NPK fertilizer",
      "Calcium and Magnesium supplements",
      "Organic manure",
    ],
  },
  "Garlic Rust": {
    precautions: [
      "Remove infected leaves promptly.",
      "Avoid overhead irrigation.",
      "Use resistant varieties if available.",
    ],
    fertilizers: [
      "Nitrogen fertilizer",
      "Phosphorus fertilizer",
      "Potassium fertilizer",
    ],
  },
};

// Mock disease detection based on image file name
function mockDetectDisease(imageFile) {
  return new Promise((resolve) => {
    setTimeout(() => {
      const name = imageFile.name.toLowerCase();
      if (name.includes("banana")) resolve("Banana Freckle");
      else if (name.includes("rice")) resolve("Sheath Blight of Rice");
      else if (name.includes("coconut")) resolve("Coconut Disease");
      else if (name.includes("rubber")) resolve("Rubber Disease");
      else if (name.includes("garlic")) resolve("Garlic Rust");
      else resolve(null);
    }, 1500);
  });
}

// Styled components
const UploadCard = styled(Card)(({ theme }) => ({
  maxWidth: "100%",
  margin: "auto",
  transition: "transform 0.3s ease, box-shadow 0.3s ease",
  "&:hover": {
    transform: "scale(1.02)",
    boxShadow: theme.shadows[6],
  },
}));

const ResultCard = styled(Card)(({ theme }) => ({
  backgroundColor: "#f0f4c3",
  padding: theme.spacing(3),
  marginTop: theme.spacing(3),
}));

export default function DiseaseDetector() {
  const [image, setImage] = useState(null);
  const [preview, setPreview] = useState(null);
  const [disease, setDisease] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [autoDetectDone, setAutoDetectDone] = useState(false); // Track if auto detect done

  const language = useLanguage(); // get current language

  const detectDisease = async (img) => {
    setError("");
    setDisease(null);
    if (!img) {
      setError(
        language === "malayalam"
          ? "‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥í‡¥∞‡µÅ ‡¥á‡¥Æ‡µá‡¥ú‡µç ‡¥Ö‡¥™‡µç‚Äå‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï."
          : "Please upload an image first."
      );
      return;
    }

    setLoading(true);

    try {
      const detected = await mockDetectDisease(img);

      // Simulate a loader delay (2 seconds)
      await new Promise((res) => setTimeout(res, 2000));

      setDisease(detected);
    } catch (e) {
      setError(
        language === "malayalam"
          ? "‡¥∞‡µã‡¥ó‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
          : "Failed to detect disease. Try again."
      );
    }

    setLoading(false);
  };

  const handleImageChange = async (e) => {
    setDisease(null);
    setError("");
    setAutoDetectDone(false); // Reset auto detect flag on new upload
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setPreview(URL.createObjectURL(file));

      // Automatically detect disease on first upload
      await detectDisease(file);
      setAutoDetectDone(true);
    }
  };

  const handleDetect = async () => {
    if (!image) {
      setError(
        language === "malayalam"
          ? "‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥í‡¥∞‡µÅ ‡¥á‡¥Æ‡µá‡¥ú‡µç ‡¥Ö‡¥™‡µç‚Äå‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï."
          : "Please upload an image first."
      );
      return;
    }
    // Manual detection triggered by button click
    await detectDisease(image);
  };

  return (
    <Container maxWidth="md" sx={{ mt: 6, mb: 6 }}>
      <Typography
        variant="h3"
        align="center"
        gutterBottom
        sx={{ fontWeight: 600 }}
      >
        üåø{" "}
        {language === "malayalam"
          ? "‡¥∏‡¥∏‡µç‡¥Ø ‡¥∞‡µã‡¥ó‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µΩ"
          : "Crop Disease Detector"}
      </Typography>

      <Typography
        variant="subtitle1"
        align="center"
        sx={{ mb: 4, color: "gray" }}
      >
        {language === "malayalam"
          ? "‡¥∏‡¥∏‡µç‡¥Ø‡¥∞‡µã‡¥ó‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥á‡¥Æ‡µá‡¥ú‡µç ‡¥Ö‡¥™‡µç‚Äå‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï."
          : "Upload a leaf image to detect potential diseases and get recommended actions."}
      </Typography>

      <Grid container spacing={4} justifyContent="center">
        <Grid item xs={12} sm={10} md={8}>
          <Box textAlign="center">
            <Button
              variant="contained"
              component="label"
              size="large"
              sx={{ mb: 3 }}
            >
              {language === "malayalam"
                ? "‡¥á‡¥Æ‡µá‡¥ú‡µç ‡¥Ö‡¥™‡µç‚Äå‡¥≤‡µã‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï"
                : "Upload Leaf Image"}
              <input
                hidden
                accept="image/*"
                type="file"
                onChange={handleImageChange}
              />
            </Button>
          </Box>

          {preview && (
            <Grow in timeout={500}>
              <UploadCard>
                <CardMedia
                  component="img"
                  image={preview}
                  alt="Uploaded Leaf"
                  sx={{
                    maxHeight: 350,
                    objectFit: "cover",
                    borderBottom: "4px solid #c5e1a5",
                  }}
                />
              </UploadCard>
            </Grow>
          )}

          <Box textAlign="center" mt={3}>
            <Button
              variant="contained"
              color="success"
              onClick={handleDetect}
              disabled={loading}
              sx={{ px: 5, py: 1.5, fontWeight: "bold" }}
            >
              {loading
                ? language === "malayalam"
                  ? "‡¥∂‡µá‡¥ñ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ..."
                  : "Detecting..."
                : language === "malayalam"
                ? "‡¥∞‡µã‡¥ó‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡µÅ‡¥ï"
                : "Detect Disease"}
            </Button>
          </Box>
          {loading && (
            <Box mt={3} textAlign="center">
              <CircularProgress color="success" />
              <Typography variant="body2" mt={2}>
                {language === "malayalam"
                  ? "‡¥∞‡µã‡¥ó‡¥Ç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡¥æ‡¥£‡µç..."
                  : "Analyzing leaf image..."}
              </Typography>
            </Box>
          )}

          {error && (
            <Slide in direction="up" mountOnEnter unmountOnExit>
              <Alert severity="error" sx={{ mt: 3 }}>
                {error}
              </Alert>
            </Slide>
          )}

          {disease === null && !loading && image && (
            <Fade in timeout={500}>
              <Alert severity="info" sx={{ mt: 3 }}>
                {language === "malayalam"
                  ? "‡¥á‡¥Æ‡µá‡¥ú‡¥ø‡µΩ ‡¥∞‡µã‡¥ó‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥≤‡µç‡¥≤."
                  : "No disease detected on the leaf."}
              </Alert>
            </Fade>
          )}

          {disease && (
            <Slide in direction="up" mountOnEnter unmountOnExit>
              <ResultCard elevation={4}>
                <Typography variant="h5" gutterBottom>
                  ‚úÖ{" "}
                  {language === "malayalam"
                    ? `‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø‡¥Ø ‡¥∞‡µã‡¥ó‡¥Ç: `
                    : `Disease Detected: `}
                  <Box component="span" fontWeight="bold">
                    {language === "malayalam"
                      ? translateDiseaseName(disease)
                      : disease}
                  </Box>
                </Typography>

                <Typography variant="subtitle1" gutterBottom>
                  {language === "malayalam"
                    ? "‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥Æ‡µÅ‡µª‡¥ï‡¥∞‡µÅ‡¥§‡¥≤‡µÅ‡¥ï‡µæ:"
                    : "Recommended Precautions:"}
                </Typography>
                <Box component="ul" sx={{ pl: 3 }}>
                  {diseaseDatabase[disease].precautions.map((tip, idx) => (
                    <li key={idx}>
                      <Typography variant="body1">
                        {language === "malayalam" ? translateTip(tip) : tip}
                      </Typography>
                    </li>
                  ))}
                </Box>
                <Typography variant="subtitle1" gutterBottom sx={{ mt: 2 }}>
                  {language === "malayalam"
                    ? "‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ:"
                    : "Suggested Fertilizers:"}
                </Typography>
                <Box component="ul" sx={{ pl: 3 }}>
                  {diseaseDatabase[disease].fertilizers.map((fert, idx) => (
                    <li key={idx}>
                      <Typography variant="body1">
                        {language === "malayalam"
                          ? translateFertilizer(fert)
                          : fert}
                      </Typography>
                    </li>
                  ))}
                </Box>
              </ResultCard>
            </Slide>
          )}
        </Grid>
      </Grid>
    </Container>
  );
}
const translateFertilizer = (fert) => {
  const fertMap = {
    "Balanced NPK fertilizer (10-10-10)": "‡¥∏‡¥Æ‡¥§‡µÅ‡¥≤‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø NPK ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç (10-10-10)",
    "Potassium-rich fertilizer": "‡¥™‡µä‡¥ü‡µç‡¥ü‡¥æ‡¥∏‡µç‡¥Ø‡¥Ç ‡¥∏‡¥Æ‡µÉ‡¥¶‡µç‡¥ß‡¥Æ‡¥æ‡¥Ø ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç",
    "Organic compost": "‡¥ì‡µº‡¥ó‡¥æ‡¥®‡¥ø‡¥ï‡µç ‡¥ï‡µã‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç",
    "Nitrogen fertilizer (Urea)": "‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç (‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø)",
    "Phosphorus fertilizer (Single Super Phosphate)":
      "‡¥´‡µã‡¥∏‡µç‡¥´‡¥±‡¥∏‡µç ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç (‡¥∏‡¥ø‡¥Ç‡¥ó‡¥ø‡µæ ‡¥∏‡µÇ‡¥™‡µç‡¥™‡µº ‡¥´‡µã‡¥∏‡µç‡¥´‡µá‡¥±‡µç‡¥±‡µç)",
    "Potassium fertilizer (Muriate of Potash)":
      "‡¥™‡µä‡¥ü‡µç‡¥ü‡¥æ‡¥∏‡µç‡¥Ø‡¥Ç ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç (‡¥Æ‡µç‡¥Ø‡µÇ‡¥∞‡¥ø‡¥Ø‡µá‡¥±‡µç‡¥±‡µç ‡¥ì‡¥´‡µç ‡¥™‡µä‡¥ü‡µç‡¥ü‡¥æ‡¥∑‡µç)",
    "Coconut-specific NPK fertilizers": "‡¥§‡µÜ‡¥ô‡µç‡¥ô‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥™‡µç‡¥∞‡¥§‡µç‡¥Ø‡µá‡¥ï NPK ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ",
    "Magnesium sulfate": "‡¥Æ‡¥ó‡µç‡¥®‡µÄ‡¥∑‡µç‡¥Ø‡¥Ç ‡¥∏‡µæ‡¥´‡µá‡¥±‡µç‡¥±‡µç",
    "Organic mulch and compost": "‡¥ì‡µº‡¥ó‡¥æ‡¥®‡¥ø‡¥ï‡µç ‡¥Æ‡µæ‡¥ö‡µç‡¥ö‡µç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡¥ï‡µã‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç",
    "Balanced NPK fertilizer": "‡¥∏‡¥Æ‡¥§‡µÅ‡¥≤‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø NPK ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç",
    "Calcium and Magnesium supplements": "‡¥ï‡¥æ‡¥≤‡µç‡¥∑‡µç‡¥Ø‡¥Ç, ‡¥Æ‡¥ó‡µç‡¥®‡µÄ‡¥∑‡µç‡¥Ø‡¥Ç ‡¥∏‡¥™‡µç‡¥≤‡¥ø‡¥Æ‡µÜ‡¥®‡µç‡¥±‡µÅ‡¥ï‡µæ",
    "Organic manure": "‡¥ì‡µº‡¥ó‡¥æ‡¥®‡¥ø‡¥ï‡µç ‡¥µ‡¥≥‡¥Ç",
    "Nitrogen fertilizer": "‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç",
    "Phosphorus fertilizer": "‡¥´‡µã‡¥∏‡µç‡¥´‡¥±‡¥∏‡µç ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç",
    "Potassium fertilizer": "‡¥™‡µä‡¥ü‡µç‡¥ü‡¥æ‡¥∏‡µç‡¥Ø‡¥Ç ‡¥â‡¥£‡¥ï‡µç‡¥ï‡¥µ‡¥≥‡¥Ç",
  };
  return fertMap[fert] || fert;
};

// Malayalam translations for disease names
const translateDiseaseName = (name) => {
  const map = {
    "Banana Freckle": "‡¥¨‡¥®‡¥æ‡¥® ‡¥´‡µç‡¥∞‡µÜ‡¥ï‡¥ø (‡¥´‡µà‡¥≤‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µÜ‡¥±‡¥ø‡¥ï ‡¥ï‡¥æ‡¥µ‡µÜ‡µª‡¥°‡¥ø‡¥∑‡¥ø)",
    "Sheath Blight of Rice": "‡¥Ö‡¥∞‡¥ø‡¥™‡µç‡¥™‡¥ü‡¥ø ‡¥∑‡µÄ‡¥§‡µç‡¥§‡µç ‡¥¨‡µç‡¥≤‡µà‡¥±‡µç‡¥±‡µç",
    "Coconut Disease": "‡¥§‡µÜ‡¥ô‡µç‡¥ô‡µç ‡¥∞‡µã‡¥ó‡¥Ç",
    "Rubber Disease": "‡¥±‡¥¨‡µç‡¥¨‡µº ‡¥∞‡µã‡¥ó‡¥Ç",
    "Garlic Rust": "‡¥µ‡µÜ‡¥≥‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥≥‡µç‡¥≥‡¥ø ‡¥±‡¥∏‡µç‡¥±‡µç‡¥±‡µç",
  };
  return map[name] || name;
};

// Malayalam translations for precautions
const translateTip = (tip) => {
  const tipsMap = {
    "Remove infected banana leaves.": "‡¥∏‡¥Ç‡¥ï‡µç‡¥∞‡¥Æ‡¥ø‡¥ö‡µç‡¥ö ‡¥¨‡¥®‡¥æ‡¥® ‡¥á‡¥≤‡¥ï‡µæ ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
    "Use disease-free planting material.": "‡¥∞‡µã‡¥ó‡¥Æ‡µÅ‡¥ï‡µç‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥µ‡¥ø‡¥§‡µç‡¥§‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Apply recommended fungicides.": "‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Maintain proper water management.": "‡¥∂‡µÅ‡¥¶‡µç‡¥ß‡¥Æ‡¥æ‡¥Ø ‡¥ú‡¥≤‡¥ï‡µç‡¥∞‡¥Æ‡¥Ç ‡¥™‡¥æ‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Avoid dense planting to improve air circulation.":
      "‡¥Æ‡µÇ‡¥ü‡¥ø‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥§‡µã‡¥ü‡µç‡¥ü‡¥Ç ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Use fungicides as advised by experts.":
      "‡¥µ‡µà‡¥¶‡µç‡¥Ø‡¥∞‡µÅ‡¥ü‡µÜ ‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥™‡µç‡¥∞‡¥ï‡¥æ‡¥∞‡¥Ç ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Remove and destroy affected fronds.":
      "‡¥¨‡¥æ‡¥ß‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥á‡¥≤‡¥ï‡µæ ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥®‡¥∂‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Apply copper-based fungicides regularly.":
      "‡¥ï‡¥æ‡¥™‡µç‡¥™‡µº ‡¥Ö‡¥ü‡¥ô‡µç‡¥ô‡¥ø‡¥Ø ‡¥´‡¥Ç‡¥ó‡¥ø‡¥∏‡µà‡¥°‡µç ‡¥∏‡µç‡¥•‡¥ø‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Ensure good soil drainage.": "‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥ú‡¥≤‡¥Æ‡µä‡¥¥‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Prune infected branches.": "‡¥¨‡¥æ‡¥ß‡¥ø‡¥§ ‡¥∂‡¥æ‡¥ñ‡¥ï‡µæ ‡¥Æ‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µÅ ‡¥ï‡¥≥‡¥Ø‡µÅ‡¥ï.",
    "Maintain tree vigor through balanced fertilization.":
      "‡¥∏‡¥Æ‡¥§‡µÅ‡¥≤‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥™‡¥ï‡µΩ‡¥µ‡µÉ‡¥ï‡µç‡¥∑‡¥Ç ‡¥µ‡¥≥‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï.",
    "Remove infected leaves promptly.": "‡¥∏‡¥Ç‡¥ï‡µç‡¥∞‡¥Æ‡¥ø‡¥ö‡µç‡¥ö ‡¥á‡¥≤‡¥ï‡µæ ‡¥â‡¥ü‡µª ‡¥®‡µÄ‡¥ï‡µç‡¥ï‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
    "Avoid overhead irrigation.": "‡¥Æ‡µÅ‡¥ï‡¥≥‡¥ø‡¥≤‡µÇ‡¥ü‡µÜ ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥µ‡¥ø‡¥§‡¥±‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    "Use resistant varieties if available.":
      "‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µã‡¥ß ‡¥∂‡µá‡¥∑‡¥ø‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥á‡¥®‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
  };
  return tipsMap[tip] || tip;
};
